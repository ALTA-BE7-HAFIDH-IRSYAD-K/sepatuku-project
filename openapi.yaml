openapi: '3.0.2'
info:
  title:  Sepatuku API
  description: Group 3 Project
  version: '1.0.0'
servers:
  - description: Sepatuku-api
    url: https://52.87.250.27:8080/api/v1
    variables:
      environment: 
        default: dev
        enum:
          - "prod"
          - "dev"
tags:
  - name: Auth
    description: Authentication
  - name: Users
    description: User control
  - name: Products
    description: Product control
paths:
  /login:
    post:
      tags:
        - Auth
      summary: login user
      description: Login user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestLogin'
            examples:
              userData1:
                description: "Example data user"
                value: {
                  identifier: "nasrul@alterra.id",
                  password: "inipassword"
                }
              userData2:
                description: "Example data user"
                value: {
                  identifier: "nasrul123",
                  password: "inipassword"
                }
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    code: 200,
                    status: "success",
                    message: "Login Successfully",
                    data: {
                      token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2MzgzMjYxODAsInVzZXJJZCI6MSwidXNlcm5hbWUiOiJhZG1pbiJ9.AebFR-oQjUSOMez2ucDWkiMrS2eQIPmcYm5c71qZ_co"
                    }
                  }
                responseData2:
                  description: response success 2
                  value: {
                    code: 200,
                    status: "success",
                    message: "Login Successfully",
                    data: {
                      token: "AyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2MzgzMjYxODAsInVzZXJJZCI6MSwidXNlcm5hbWUiOiJhZG1pbiJ9.AebFR-oQjUSOMez2ucDWkiMrS2eQIPmcYm5c71qZ_co"
                    }
                  }

        '400':
          description: Success Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    code: 400,
                    status: "failed",
                    message: "user not found"
                  }
                responseData2:
                  description: response failed 2
                  value: {
                    code: 400,
                    status: "failed",
                    message: "password incorrect"
                  }
  /users:
    post:
      tags:
        - Users
      summary: register
      description: Register user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestUserData'
            examples:
              userData1:
                description: "Example data user"
                value: {
                  username: "sepatu",
                  email: "sepatu@mail.com",
                  password: "inipassword",
                  address: "Surabaya",
                  phone: "082333444555"
                }
              userData2:
                description: "Example data user"
                value: {
                  username: "Alta 2",
                  email: "alta2@alterra.id",
                  password: "inipassword2",
                  address: "Jakarta2",
                  phone: "082333444666"
                }
      responses:
        '200':
          $ref: '#/components/responses/registerUserSuccess'
        '400':
          $ref: '#/components/responses/registerUserFailed'
    get:
      tags:
        - Users
      summary: get user profile
      description: Get User by ID
      security:
        - JWTAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getUserProfileSuccess'
        '400':
          $ref: '#/components/responses/getUserProfileFailed'
    put:
      tags:
        - Users
      summary: edit user profile
      description: Edit user profile
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: bujang
                email:
                  type: string
                  example: bujang@mail.com
                password:
                  type: string
                  example: inipasswordbaru
                address:
                  type: string
                  example: ini alamat baru
                phone:
                  type: string
                  example: "082333444777"
      responses:
        '200':
          $ref: '#/components/responses/editUserProfileSuccess'
        '400':
          $ref: '#/components/responses/editUserProfileFailed'
    delete:
      tags:
        - Users
      summary: delete user
      description: Delete User by ID
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: id user
          in: path
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          $ref: '#/components/responses/responseSuccess'
        '400':
          $ref: '#/components/responses/responseFailed'
  /products:
    post:
      tags:
        - Products
      summary: create product
      description: Create Product
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestUserData'
            examples:
              productData:
                description: "Example data product"
                value: {
                  user_id: 1,
                  name_product: "sepatu tua",
                  description: "sepatu ini bisa bikin tua",
                  price: 100000,
                  image: "images",
                  stock: 2
                }
      responses:
        '200':
          $ref: '#/components/responses/ProductSuccess'
        '400':
          $ref: '#/components/responses/ProductFailed'
    get:
      tags:
        - Products
      summary: get all product
      description: Create Product
      responses:
        '200':
          $ref: '#/components/responses/ProductSuccess'
        '400':
          $ref: '#/components/responses/ProductFailed'
  /products/{id}:
    get:
      tags:
        - Products
      summary: get product by id
      description: get Product
      parameters:
        - name: id
          description: id product
          in: path
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          $ref: '#/components/responses/ProductSuccess'
        '400':
          $ref: '#/components/responses/ProductFailed'
    put:
      tags:
        - Products
      summary: edit product
      description: edit Product
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: id product
          in: path
          schema:
            type: integer
            example: 1
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestUserData'
            examples:
              productData:
                description: "Example data product"
                value: {
                  user_id: 1,
                  name_product: "sepatu muda",
                  description: "sepatu ini bisa bikin muda",
                  price: 50000,
                  image: "images",
                  stock: 2
                }
      responses:
        '200':
          $ref: '#/components/responses/editProductSuccess'
        '400':
          $ref: '#/components/responses/editProductFailed'
    delete:
      tags:
        - Products
      summary: delete product
      description: delete Product
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: id product
          in: path
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          $ref: '#/components/responses/responseSuccess'
        '400':
          $ref: '#/components/responses/responseFailed'
#==================================#
#    COMPONENT
#==================================#
components:

  #==================================#    
  #    JWT
  #==================================#
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "use Token"
  #==================================#
  #    SCHEMAS
  #==================================#
  schemas:
    requestLogin:
      type: object
      properties:
        "identifier":
          type: string
          minLength: 1
        "password":
          type: string
          minLength: 1
    requestUserData:
      type: object
      properties:
        "username":
          type: string
          minLength: 1
        "email":
          type: string
          minLength: 1
        "password":
          type: string
          minLength: 1
        "address":
          type: string
          minLength: 1
        "phone":
          type: string
          minLength: 1
    requestProductData:
      type: object
      properties:
        "user_id":
          type: integer
          minLength: 1
        "name_product":
          type: string
          minLength: 1
        "description":
          type: string
          minLength: 1
        "price":
          type: integer
          minLength: 1
        "address":
          type: string
          minLength: 1
        "phone":
          type: string
          minLength: 1
    #==================================#
    #    RESPONSE FOR GENERAL REQUEST
    #==================================#
  responses:
    responseSuccess:
      description: Successful Operation
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Successful Operation
    responseFailed:
      description: register failed
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 400
              status:
                type: string
                example: failed
              message:
                type: string
                example: Bad Request
    #==================================#
    #    RESPONSE REGISTER USER
    #==================================#
    registerUserSuccess:
      description: success to register
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: register successfully
              data:
                type: object
                properties:
                  name:
                    type: string
                    example: sepatu
                  email:
                    type: string
                    example: sepatu@mail.com
                  address:
                    type: string
                    example: Surabaya
                  phone:
                    type: string
                    example: "082333444555"
    registerUserFailed:
      description: fail to register
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 400
              status:
                type: string
                example: failed
              message:
                type: string
                example: register failed
    #==================================#
    #    RESPONSE GET USER PROFILE
    #==================================#
    getUserProfileSuccess:
      description: success get user profile
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Success Get User Profile
              data:
                type: object
                properties:
                  name:
                    type: string
                    example: sepatu
                  email:
                    type: string
                    example: sepatu@mail.com
                  address:
                    type: string
                    example: Surabaya
                  phone:
                    type: string
                    example: 082333444555
    getUserProfileFailed:
      description: fail to get user profile
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 400
              status:
                type: string
                example: failed
              message:
                type: string
                example: Fail to Get User Profile
    #==================================#
    #    RESPONSE EDIT USER PROFILE
    #==================================#
    editUserProfileSuccess:
      description: success change user profile
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Success to Update Profile
              data:
                type: object
                properties:
                  username:
                    type: string
                    example: bujang
                  email:
                    type: string
                    example: bujang@mail.com
                  address:
                    type: string
                    example: ini alamat baru
                  phone:
                    type: string
                    example: "082333444777"
    editUserProfileFailed:
      description: fail to change user profile
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Fail to Update Profile
    #==================================#
    #    RESPONSE EDIT PRODUCT
    #==================================#
    editProductSuccess:
      description: success change product
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Success Update Product
              data:
                type: object
                properties:
                  name_product:
                    type: string
                    example: sepatu muda
                  descripton:
                    type: string
                    example: sepatu ini bisa bikin muda
                  price:
                    type: integer
                    example: 50000
                  image:
                    type: string
                    example: "images"
                  stock:
                    type: integer
                    example: 2  
    editProductFailed:
      description: fail to change product
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Fail to Update Profile
    #==================================#
    #    RESPONSE PRODUCT
    #==================================#
    ProductSuccess:
      description: Operation success
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Success Update Product
              data:
                type: object
                properties:
                  name_product:
                    type: string
                    example: sepatu tua
                  descripton:
                    type: string
                    example: sepatu ini bisa bikin tua
                  price:
                    type: integer
                    example: 100000
                  image:
                    type: string
                    example: "images"
                  stock:
                    type: integer
                    example: 2  
    ProductFailed:
      description: Operation failed
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: failed
              message:
                type: string
                example: Fail to fetch data